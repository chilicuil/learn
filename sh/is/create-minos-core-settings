#!/bin/sh
#create default minos core settings
#usage: create-minos-default-core-setting

#example create-minos-default-core-setting
#a ${1}/ directory is generated with minimal minos settings

trap _cleanup 15 #trap ctrl-c
#trap _cleanup SIGINT SIGTERM #trap ctrl-c

file_header="This file is part of the minos-core-settings package"
total_errors="0"
progname="$(expr "${0}" : '.*/\([^/]*\)')"

_usage() {
    printf "%b\\n" "Usage: ${progname} [directory]"
    printf "%b\\n" "minos core settings creator."
    printf "\\n"
    printf "%s\\n" "  -h, --help   show this help message and exit"
}

_cmd() {
    [ -z "${1}" ] && return 0

    printf "%s " "[$] ${@}"
    printf "\\n"
    eval "${@}"

    _cmd__status="${?}"
    [ X"${_cmd__status}" != X"0" ] && exit "${_cmd__status}" || return
}

_cleanup() {
    stty echo
    printf "\\n"
    printf "%s\\n" "[+] cleanup ..."
    _cmd rm -rf "${target_directory}"

    [ -z ${1} ] && exit
}

_file_or_directory_exist() {
    [ -z "${1}" ] && return 1
    [ -f "${1}" ] && return 0
    [ -d "${1}" ] && return 0
    printf "\\n%s\\n" "WARNING: ${1} doesn't exists, skipping ..." >&2
    total_errors="$((total_errors + 1))"
    return 1
}

_create_minos_default_core_settings() {
    #$1 => target directory
    [ -z "${1}" ] && return 1

    [ -d "${1}" ] && _cmd rm -rf "${1}"
    _cmd mkdir -p "${1}"

    if _file_or_directory_exist ~/.bashrc; then
        echo
        _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##profile.d##minos-bash.sh"
        _cmd "sed -n '/^#===/,/^#}1/p;/^#}1/q' ~/.bashrc | head -n -1 >> ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -n '/{2/,/^#}2/p;/^#}2/q' ~/.bashrc  | head -n -1 | sed 1d >> ${1}/etc##profile.d##minos-bash.sh"
        _cmd "echo >> ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -n '/{3/,/^#}3/p;/^#}3/q' ~/.bashrc | head -n -1 | sed 1d >> ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -i 's:^#export _JAVA:export _JAVA:' ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -i '/tmux/d' ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -i '/GPGKEY/d' ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -i '/^#gpg/d' ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -i '/^#random vars/d' ${1}/etc##profile.d##minos-bash.sh"
        _cmd "sed -i '/LC_ALL/d' ${1}/etc##profile.d##minos-bash.sh"
    fi

    if _file_or_directory_exist ~/.aliases; then
        echo
        _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##skel##.aliases"
        _cmd "sed -n '/^\[/,/xdg-open/p;/xdg-open/q' ~/.aliases >> ${1}/etc##skel##.aliases"
        _cmd "sed -n '/(gpg -d/p' ~/.aliases >> ${1}/etc##skel##.aliases"
        _cmd "echo >> ${1}/etc##skel##.aliases"
        _cmd "sed -n '/eix.exact=/p' ~/.aliases >> ${1}/etc##skel##.aliases"
        _cmd "echo >> ${1}/etc##skel##.aliases"
        _cmd "echo '# vim: set ts=8 sw=4 tw=0 ft=conf :' >> ${1}/etc##skel##.aliases"
    fi

    if _file_or_directory_exist ~/.bash_profile; then
        echo
        _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##skel##.bash_profile"
        _cmd "cat ~/.bash_profile >> ${1}/etc##skel##.bash_profile"
    fi

    if _file_or_directory_exist ~/.bashrc; then
        echo
        _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##skel##.profile.d##shundle.sh"
        _cmd "printf \"%s\\n\\n\" \"#http://github.com/javier-lopez/shundle\" >> \"${1}\"/etc##skel##.profile.d##shundle.sh"
        _cmd "sed -n '/shundle/,\$p' ~/.bashrc >> ${1}/etc##skel##.profile.d##shundle.sh"
    fi

    if _file_or_directory_exist ~/.tmux.conf; then
        echo
        _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##skel##.tmux.conf"
        _cmd "cat ~/.tmux.conf >> ${1}/etc##skel##.tmux.conf"
    fi

    if _file_or_directory_exist ~/.vimrc; then
        echo
        _cmd "printf \"%s\\n\\n\" \"\\\"${file_header}\" > \"${1}\"/etc##skel##.vimrc"
        _cmd "cat ~/.vimrc >> ${1}/etc##skel##.vimrc"
    fi

    if _file_or_directory_exist ~/.ssh/config; then
        echo
        _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##ssh##ssh_config"
        _cmd "sed -n '/^Host \*$/,/^$/p;/^$/q' ~/.ssh/config >> ${1}/etc##ssh##ssh_config"
    fi

    echo
    _cmd "printf \"%s\\n\\n\" \"#${file_header}\" > \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"Defaults	insults,timestamp_timeout=60\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"Defaults	!tty_tickets\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "echo >> ${1}/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"Cmnd_Alias MINOS_SESSION=/usr/sbin/pm-suspend,/usr/sbin/pm-hibernate,/sbin/shutdown\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"Cmnd_Alias MINOS_BACKUP=/usr/bin/backup_remote_rsync\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"Cmnd_Alias WAKEUP=/usr/sbin/rtcwake\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "echo >> ${1}/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"#Members of the sudo group can use these commands without passwd\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"%sudo ALL=(root) NOPASSWD:MINOS_SESSION,MINOS_BACKUP\" >> \"${1}\"/etc##sudoers.d##minos-core"
    _cmd "printf \"%s\\n\" \"%sudo ALL=(root) NOPASSWD:WAKEUP\" >> \"${1}\"/etc##sudoers.d##minos-core"

    echo
    _cmd "printf \"%s\\n\\n\" \"Minos LTS \n \l\" > \"${1}\"/etc##issue"

    echo
    _cmd "printf \"%s\\n\\n\" \"Minos LTS\" > \"${1}\"/etc##issue.net"

    echo
    cat > "${1}"/etc##update-motd.d##00-header <<'EOF'
#!/bin/sh
. /etc/os-release 2>/dev/null
if [ -z "${VERSION_ID}" ]; then
    printf "\\nWelcome to Minos (%s %s %s)\\n\\n" "$(uname -o)" "$(uname -r)" "$(uname -m)"
else
    printf "\\nWelcome to Minos %s LTS (%s %s %s)\\n\\n" "$VERSION_ID" "$(uname -o)" "$(uname -r)" "$(uname -m)"
fi
EOF
    _cmd "chmod +x ${1}/etc##update-motd.d##00-header"

    echo
    _cmd "printf \"%s\\n\\n\" \"#!/bin/sh\" > \"${1}\"/etc##update-motd.d##10-help-text"
    _cmd "printf \"%s\\n\" \":\" >> \"${1}\"/etc##update-motd.d##10-help-text"
    _cmd "chmod +x ${1}/etc##update-motd.d##10-help-text"

    echo
    cat > "${1}"/etc##update-motd.d##10-minos-sysinfo <<'EOF'
#!/bin/sh
#show system information

[ -x /etc/update-motd.d/50-landscape-sysinfo ] && exit

_column() {
    if command -v "column" >/dev/null 2>&1; then
        column -t -s'|'
    else
        awk -F'|' '{printf "%-35s  %-15s\n", $1,$2}'
    fi
}

_bytes2human() {
    [ -z "${1}" ] && return 1
    #is int?
    case "${1%.*}" in
        *[!0-9]*|"") return 1 ;;
    esac

    printf "%s\\n" "${1}" | awk '{
        split( "Bytes K M G Tb Eb Pb Yb Zb" , v );
        s=1; while($1>=1024) { $1/=1024; s++ }
        printf("%.1f%s\n", $1, v[s])}' | sed 's:\.0::'
}

load="$(awk '{print $1}' /proc/loadavg)"
uptime="$(uptime | awk '{sub(/,/," hours"); printf $3" "$4}')"
#users="$(users | wc -w)"
#ps_output="$(ps aux)"
#processes="$(printf "%s\\n" "${ps_output}" | wc -l)"
#top_process="$(printf "%s\\n" "${ps_output}" | awk '{print $2, $4"%", $11}' | sort -k2rn | awk '{print $3, $2;exit}')"
#ip="$(ifconfig $(route | grep default | awk '{ print $8 }') | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}')"

df_output="$(df -h)"

root_usage="$(printf "%s\\n" "${df_output}" | awk '/\/$/ {print $(NF-3);exit}')"
root_usage_percentage="$(printf "%s\\n" "${df_output}" | awk '/\/$/ {print $(NF-1);exit}')"
root_total="$(printf "%s\\n" "${df_output}" | awk '/\/$/ {print $(NF-4);exit}')"
root_usage_msg="${root_usage}, ${root_usage_percentage} of ${root_total}"

home_usage="$(printf "%s\\n" "${df_output}" | awk '/\/home$/ {print $(NF-3);exit}')"
home_usage_percentage="$(printf "%s\\n" "${df_output}" | awk '/\/home$/ {print $(NF-1);exit}')"
if [ -n "${home_usage_percentage}" ]; then
    home_total="$(printf "%s\\n" "${df_output}" | awk '/\/home$/ {print $(NF-4);exit}')"
    home_usage_msg="${home_usage}, ${home_usage_percentage} of ${home_total}"
else
    home_usage_msg="none detected"
fi

#https://bugzilla.redhat.com/show_bug.cgi?id=1253036
memory_output="$(free -k)"

memory_usage="$(printf "%s\\n" "${memory_output}" | awk '/Mem:/ {print $3; exit;}')"
memory_usage="$(_bytes2human "$(($memory_usage*1024))")"
memory_usage_percentage="$(printf "%s\\n" "${memory_output}" | \
    awk '/Mem:/ {total=$2; used=$3} /buffers\/cache/ { used=$3 } END { printf("%2d", used/total*100)}' | sed 's: \([0-9]\):\1:')"
memory_total="$(printf "%s\\n" "${memory_output}" | awk '/Mem:/ {print $2; exit;}')"
memory_total="$(_bytes2human "$(($memory_total*1024))")"
memory_usage_msg="${memory_usage}, ${memory_usage_percentage}% of ${memory_total}"

swap_usage="$(printf "%s\\n" "${memory_output}" | awk '/Swap:/ {print $3; exit;}')"
swap_usage="$(_bytes2human "$(($swap_usage*1024))")"
swap_usage_percentage="$(printf "%s\\n" "${memory_output}" | \
    awk '/Swap:/ {total=$2; used=$3} END { printf("%2d", used/total*100)}' | sed 's: \([0-9]\):\1:')"
if [ -n "${swap_usage_percentage}" ]; then
    swap_total="$(printf "%s\\n" "${memory_output}" | awk '/Swap:/ {print $2; exit;}')"
    swap_total="$(_bytes2human "$(($swap_total*1024))")"
    swap_usage_msg="${swap_usage}, ${swap_usage_percentage}% of ${swap_total}"
else
    swap_usage_msg="none detected"
fi

printf "%s\\n\\n" "System information as of: $(date)"
(
printf "System load:  %s|System uptime:  %s\n" "${load}" "${uptime}"
printf "Memory usage: %s|Swap usage:     %s\n" "${memory_usage_msg}" "${swap_usage_msg}"
printf "Usage on /:   %s|Usage on /home: %s\n" "${root_usage_msg}"   "${home_usage_msg}"
) | _column
#printf "Processes:\t%s\tTop process:\t%s\n" "$processes" "$top_process"
printf "\\n"
EOF
    _cmd "chmod +x ${1}/etc##update-motd.d##10-minos-sysinfo"

    echo
    _cmd "touch ${1}/etc##legal"

    echo
    _cmd "printf \"%s\\n\\n\" \"// ${file_header}\" > \"${1}\"/etc##apt##apt.conf.d##05disable-recommends"
    _cmd "printf \"%s\\n\" \"APT::Install-Recommends \\\"false\\\";\" >> \"${1}\"/etc##apt##apt.conf.d##05disable-recommends"

    echo
    _cmd "printf \"%s\\n\\n\" \"// ${file_header}\" > \"${1}\"/etc##apt##apt.conf.d##05disable-suggests"
    _cmd "printf \"%s\\n\" \"APT::Install-Suggests \\\"false\\\";\" >> \"${1}\"/etc##apt##apt.conf.d##05disable-suggests"

    if _file_or_directory_exist ~/.gitconfig; then
        echo
        _cmd "printf \"%s\\n\\n\" \";${file_header}\" > \"${1}\"/etc##gitconfig"
        _cmd "cat ~/.gitconfig                        >>    ${1}/etc##gitconfig"
        _cmd "sed -i '/^\[user\]$/,/^$/d'                   ${1}/etc##gitconfig"
        _cmd "sed -i '/^\[github\]$/,/^$/d'                 ${1}/etc##gitconfig"
    fi

    cat > "${1}/usr##share##debconf##confmodule" << 'E=O=F'
#!/bin/sh
#While abusing apt some maintainer postinst scripts fail to
#run debconf due to missing file descriptors, eg:
#https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=439763
#http://help-cfengine.narkive.com/foRdaZbB/shellcommands-3-bad-file-descriptor
#https://bugs.launchpad.net/ubuntu/+source/cloud-init/+bug/961142

#replace db_* functions as a nasty workaround
db_capb ()               { return 0; }
db_set ()                { return 0; }
db_reset ()              { return 0; }
db_title ()              { return 0; }
db_input ()              { return 0; }
db_beginblock ()         { return 0; }
db_endblock ()           { return 0; }
db_go ()                 { return 0; }
db_get ()                { return 0; }
db_register ()           { return 0; }
db_unregister ()         { return 0; }
db_subst ()              { return 0; }
db_fset ()               { return 0; }
db_fget ()               { return 0; }
db_purge ()              { return 0; }
db_metaget ()            { return 0; }
db_version ()            { return 0; }
db_clear ()              { return 0; }
db_settitle ()           { return 0; }
db_previous_module ()    { return 0; }
db_info ()               { return 0; }
db_progress ()           { return 0; }
db_data ()               { return 0; }
db_x_loadtemplatefile () { return 0; }
db_text ()               { return 0; }
db_stop ()               { return 0; }
E=O=F

    printf "\\n%s\\n" "[+] New minos core settings generated at: ${1}/"
    [ "${total_errors}" -gt "0" ] && printf "%s\\n" "[-] "${total_errors}" errors were found, see above to find more details" && return 1 || :

    cat > "${1}/README.md" << 'E=O=F'
## About

This repository provides minimal settings which gives to minos its identity. It's intend to be installed in all environments, even those without graphic interface. Some of the changes affect:

- Skel default files:
 - `.bash_profile`: add gpg-agent/tmux autolaunchers
 - `.aliases`: replace cd, rm and other core system applications with minos wrappers
 - `.profile.d/shundle.sh`: shundle integration
 - `.tmux.conf`: tmux/tundle integration
 - `.vimrc`: vim configuration

- Sudo settings:
 - turn on sudo insults
 - set a longer (1hr) timeout
 - bypass password authentication for shutdown/hibernate/wakeup

- Ssh:
 - connection sharing, improve performance and general resiliance

- Bash
 - autocompletion enhancement
 - 'vi' as default readline mode

- Motd
 - modify message of the day and other personality files

## Quick start

### On Ubuntu (only LTS releases)

1. Set up the minos archive:

   ```
   $ sudo add-apt-repository ppa:minos-archive/main
   ```

2. Install:

   ```
   $ sudo apt-get update && sudo apt-get install minos-core-settings
   ```

3. Enjoy ☺!

## Feedback

Please drop me an [email](mailto:m@javier.io) with your suggestions or open [an issue](https://github.com/minos-org/minos-core-settings/issues) with your comments.
E=O=F
}

for arg; do #parse options
    case "${arg}" in
        -h|--help) _usage && exit ;;
        -*) printf "%s\\n" "${progname}: unrecognized option '${arg}'" >&2
            _usage >&2; exit 1 ;;
        *) target_directory="${arg}"
    esac
done; target_directory="${target_directory:-minos-core-settings}"

_create_minos_default_core_settings "${target_directory}"
